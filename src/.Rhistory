install.packages("party");
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(test_size_with_na)
View(test_size_with_na)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
model <- svm(target ~ ., data = df_train, kernel = "linear", cost = 10)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(results)
View(results)
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(results)
View(results)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
raw_data = read.csv("../Datasets/JobChanges/aug_train.csv", header=T, sep=",", na.strings=c("","NA"))
#df <- df[1:3000,]
data <- prepareData(raw_data)
## set the seed to make your partition reproducible
set.seed(123)
onePercentOfSamples <- floor(0.1 * nrow(data))
train_idx <- sample(seq_len(nrow(data)), size = onePercentOfSamples)
training_set <- data[train_idx, ]; # str(training_set)
validating_set <- data[-train_idx, ]; # str(validating_set)
validating_set$target <- NULL
model <- svm(target ~ ., data = training_set, kernel = "linear")
print(model)
predict(model, newdata = validating_set)
pred <- predict(model, newdata = validating_set)
pred_rounded <-round(pred)
results <- data.frame(pred_rounded, df_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(accuracy)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
source("utils.r")
source("PrepareData.r")
raw_data = read.csv("../Datasets/JobChanges/aug_train.csv", header=T, sep=",", na.strings=c("","NA"))
#df <- df[1:3000,]
data <- prepareData(raw_data)
## set the seed to make your partition reproducible
set.seed(123)
onePercentOfSamples <- floor(0.1 * nrow(data))
train_idx <- sample(seq_len(nrow(data)), size = onePercentOfSamples)
training_set <- data[train_idx, ]; # str(training_set)
validating_set <- data[-train_idx, ]; # str(validating_set)
validating_set$target <- NULL
model <- svm(target ~ ., data = training_set, kernel = "linear")
print(model)
predict(model, newdata = validating_set)
pred <- predict(model, newdata = validating_set)
pred_rounded <-round(pred)
results <- data.frame(pred_rounded, df_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(accuracy)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source("utils.r")
source("PrepareData.r")
raw_data = read.csv("../Datasets/JobChanges/aug_train.csv", header=T, sep=",", na.strings=c("","NA"))
#df <- df[1:3000,]
data <- prepareData(raw_data)
## set the seed to make your partition reproducible
set.seed(123)
onePercentOfSamples <- floor(0.1 * nrow(data))
train_idx <- sample(seq_len(nrow(data)), size = onePercentOfSamples)
training_set <- data[train_idx, ]; # str(training_set)
validating_set <- data[-train_idx, ]; # str(validating_set)
validating_set$target <- NULL
model <- svm(target ~ ., data = training_set, kernel = "linear")
print(model)
predict(model, newdata = validating_set)
pred <- predict(model, newdata = validating_set)
pred_rounded <-round(pred)
results <- data.frame(pred_rounded, df_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(accuracy)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(data)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(pred_validation)
View(pred_validation)
source('~/Active-learning-svm-zum/src/Main-arek.r')
head(attr(pred_validation, "probabilities"))
source('~/Active-learning-svm-zum/src/Main-arek.r')
head(attr(pred_validation, "probabilities"))
source('~/Active-learning-svm-zum/src/Main-arek.r')
pred_validation <- predict(model, validating_set, probability = TRUE)
correct_vals <- correct_vals + 1
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(pred_validation)
View(pred_validation)
head(attr(pred_validation, "probabilities"))
pred_validation = as.data.frame(pred_validation)
head(attr(pred_validation, "probabilities"))
pred_validation = as.data.frame(pred_validation)
head(attr(pred_validation, "probabilities"))
print(model)
head(pred_validation)
head(attr(pred_validation, "probabilities"))
source('~/Active-learning-svm-zum/src/Main-arek.r')
attr(pred_validation, "probabilities")
attr(pred_validation, "probabilities")
pred_validation <- predict(model, validating_set, decision.values = FALSE, probability = TRUE)
attr(pred_validation, "probabilities")
source('~/Active-learning-svm-zum/src/Main-arek.r')
attr(pred_validation, "probabilities")
df <- data.frame(1:nrow(validating_set), probabs, scores)
probabs <- attr(pred_validation, "probabilities");
scores <- abs(probabs[,1] - probabs[,2])
df <- data.frame(1:nrow(validating_set), probabs, scores)
View(df)
View(df)
df <- data.frame(1:nrow(validating_set), probabs, scores)
colnames(df) <- c('Index', 'Probability', 'Score')
df <- df[order(scores),]
View(df)
View(df)
k <- 10
probabs <- attr(pred_validation, "probabilities");
scores <- abs(probabs[,1] - probabs[,2])
scores_df <- data.frame(1:nrow(validating_set), probabs, scores)
colnames(scores_df) <- c('Index', 'Probability', 'Score')
scores_df <- scores_df[order(scores),]
scores_df_k <- scores_df[1:k,]
validation_set[scores_df_k$Index]
validating_set[scores_df_k$Index]
View(scores_df_k)
View(scores_df_k)
chosen <- validating_set[scores_df_k$Index]
chosen <- validating_set[scores_df_k$Index,]
View(chosen)
View(chosen)
training_set <- append(training_set, chosen_samples)
training_set <- append(training_set, chosen_samples)
validating_set <- validating_set[!validating_set %in% chosen_samples]
source('~/Active-learning-svm-zum/src/Main-arek.r')
validating_set <- validating_set[!validating_set %in% chosen_samples]
training_set <- append(training_set, chosen_samples)
View(validating_set)
View(validating_set)
View(training_set)
View(training_set)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(training_set)
View(training_set)
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(training_set)
View(training_set)
View(training_set)
View(training_set)
View(validating_set)
View(validating_set)
View(training_set)
View(training_set)
View(validating_set)
View(validating_set)
View(training_set)
View(training_set)
View(data_pool)
View(data_pool)
View(validating_set)
View(validating_set)
training_set <- data_pool[1:train_idx, ]; # str(training_set)
training_set <- data_pool[1:train_idx, ]; # str(training_set)
validating_set <- data_pool[-train_idx, ]; # str(validating_set)
model <- svm(target ~ ., data = training_set, kernel = "linear", probability = TRUE)
print(model)
pred_validation <- predict(model, validating_set, probability = TRUE)
pred_test <- predict(model, data_test)
results <- data.frame(pred_test, data_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(accuracy)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
probabs <- attr(pred_validation, "probabilities");
scores <- abs(probabs[,1] - probabs[,2])
scores_df <- data.frame(1:nrow(validating_set), probabs, scores)
colnames(scores_df) <- c('Index', 'Probability', 'Score')
scores_df <- scores_df[order(scores),]
scores_df_k <- scores_df[1:k,]
chosen_samples <- validating_set[scores_df_k$Index,]
print(paste("training data size", nrow(training_set)))
View(training_set)
View(training_set)
View(validating_set)
View(validating_set)
training_set <- data_pool[1:initial_train_size, ]; # str(training_set)
validating_set <- data_pool[-initial_train_size, ]; # str(validating_set)
model <- svm(target ~ ., data = training_set, kernel = "linear", probability = TRUE)
print(model)
pred_validation <- predict(model, validating_set, probability = TRUE)
pred_test <- predict(model, data_test)
results <- data.frame(pred_test, data_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(accuracy)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
probabs <- attr(pred_validation, "probabilities");
scores <- abs(probabs[,1] - probabs[,2])
scores_df <- data.frame(1:nrow(validating_set), probabs, scores)
colnames(scores_df) <- c('Index', 'Probability', 'Score')
scores_df <- scores_df[order(scores),]
scores_df_k <- scores_df[1:k,]
chosen_samples <- validating_set[scores_df_k$Index,]
print(paste("training data size", nrow(training_set)))
View(model)
View(training_set)
View(training_set)
View(validating_set)
View(validating_set)
training_set <- append(training_set, chosen_samples)
validating_set <- validating_set[!validating_set %in% chosen_samples]
View(validating_set)
View(validating_set)
View(training_set)
View(training_set)
View(training_set)
View(training_set)
View(chosen_samples)
View(chosen_samples)
training_set <- rbind(training_set, chosen_samples)
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(training_set)
View(training_set)
View(validating_set)
source('~/Active-learning-svm-zum/src/Main-arek.r')
View(validating_set)
validating_set <- validating_set[!validating_set %in% chosen_samples]
View(validating_set)
training_set <- rbind(training_set, chosen_samples)
validating_set <- validating_set[!validating_set %in% scores_df_k$Index]
validating_set <- validating_set[!validating_set %in% scores_df_k$Index]
validating_set <- validating_set[!validating_set %in% scores_df_k$Index]
validating_set <- validating_set[!validating_set %in% scores_df_k$Index]
validating_set <- validating_set[!validating_set %in% scores_df_k$Index]
View(scores_df_k)
removes <- as.numeric(scores_df_k$Index);
validating_set <- validating_set[!validating_set %in% removes]
validating_set <- validating_set[!validating_set %in% removes]
View(validating_set)
validating_set <- validating_set[-removes,]
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
source('~/Active-learning-svm-zum/src/Main-arek.r')
#pred_validation <- predict(model, validating_set, probability = TRUE)
pred_validation <- predict(model, validating_set, type="prob")
# model <- svm(target ~ ., data = training_set, probability = TRUE)
model <-randomForest(target ~ ., data = training_set)
rm(list = ls())
source("utils.r")
source("PrepareData.r")
k <- 10
raw_data = read.csv("../Datasets/JobChanges/aug_train.csv", header=T, sep=",", na.strings=c("","NA"))
data <- prepareData(raw_data)
test_idx <- 0.8 * nrow(data) # ostatnie 20% danych to zbior testowy
data_pool <- data[1:test_idx,]
data_test <- data[-test_idx,]
## set the seed to make your partition reproducible
set.seed(123)
initial_train_size <- 30
training_set <- data_pool[1:initial_train_size, ]; # str(training_set)
validating_set <- data_pool[-initial_train_size, ]; # str(validating_set)
for (i in 1:1000) {
## ------------------------------------------------------------------------
## -----------Trenowanie modelu za pomocą zbioru trenującego---------------
## ------------------------------------------------------------------------
# model <- svm(target ~ ., data = training_set, probability = TRUE)
model <-randomForest(target ~ ., data = training_set)
print(model)
## --------------------------------------------------------------------------------
## ----------------------Predykcja na zbiorze walidacyjnym-------------------------
## --------------------------------------------------------------------------------
#pred_validation <- predict(model, validating_set, probability = TRUE)
pred_validation <- predict(model, validating_set, type="prob")
## --------------------------------------------------------------------------------
## -----------Użycie modelu na zbiorze testowym i zmierzenie wydajności------------
## --------------------------------------------------------------------------------
pred_test <- predict(model, data_test)
results <- data.frame(pred_test, data_test$target)
colnames(results) <- c('Predicted', 'Actual')
accuracy <- GetAccuracy(results)
print(paste("Accuracy:", gsub(" ", "", paste(accuracy * 100, "%"))))
## --------------------------------------------------------------------------------
## -----------Wybranie k próbek niosących najwięcej informacji---------------------
## --------------------------------------------------------------------------------
probabs <- attr(pred_validation, "probabilities");
scores <- abs(probabs[,1] - probabs[,2])
scores_df <- data.frame(1:nrow(validating_set), probabs, scores)
colnames(scores_df) <- c('Index', 'Probability', 'Score')
scores_df <- scores_df[order(scores),]
#scores_df <- scores_df[sample(nrow(scores_df)),] # shuffle data
scores_df_k <- scores_df[1:k,]
chosen_samples <- validating_set[scores_df_k$Index,]
print(paste("training data size", nrow(training_set)))
# --------------------------------------------------------------------------------
## -----Przeniesienie wybranych próbek ze zbioru walidacyjnego do treningowego----
## -------------------------------------------------------------------------------
training_set <- rbind(training_set, chosen_samples)
validating_set <- validating_set[-scores_df_k$Index,]
print("")
}
rm(list = ls())
source("utils.r")
source("PrepareData.r")
k <- 10
raw_data = read.csv("../Datasets/JobChanges/aug_train.csv", header=T, sep=",", na.strings=c("","NA"))
data <- prepareData(raw_data)
test_idx <- 0.8 * nrow(data) # ostatnie 20% danych to zbior testowy
data_pool <- data[1:test_idx,]
data_test <- data[-test_idx,]
## set the seed to make your partition reproducible
set.seed(123)
initial_train_size <- 30
training_set <- data_pool[1:initial_train_size, ]; # str(training_set)
validating_set <- data_pool[-initial_train_size, ]; # str(validating_set)
# model <- svm(target ~ ., data = training_set, probability = TRUE)
model <-randomForest(target ~ ., data = training_set)
rm(list = ls())
